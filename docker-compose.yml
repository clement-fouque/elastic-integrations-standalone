services:
  # Elasticsearch - The heart of the Elastic Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=elastic-cluster
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - elastic
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30

  # Kibana - Visualization and management interface
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
      - xpack.security.enabled=false
      - xpack.fleet.enabled=true
      - xpack.fleet.agents.enabled=true
      - xpack.fleet.packages.enabled=true
      - xpack.encryptedSavedObjects.encryptionKey=fhjskloppd678ehkdfdlliverpoolfcr
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - elastic
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30

  # Fleet Server - Manages Elastic Agents
  fleet-server:
    image: docker.elastic.co/beats/elastic-agent:8.11.0
    container_name: fleet-server
    environment:
      - FLEET_SERVER_ENABLE=true
      - FLEET_SERVER_ELASTICSEARCH_HOST=http://elasticsearch:9200
      - FLEET_SERVER_SERVICE_TOKEN=${FLEET_SERVER_SERVICE_TOKEN:-AAEAAWVsYXN0aWMvZmxlZXQtc2VydmVyL3Rva2VuLTE2OTg3NTg4Mzg4MzI6dlFfRkxOU0pUa0dZN3V6WnhXdW9Ldw}
      - FLEET_SERVER_POLICY_ID=fleet-server-policy
      - FLEET_SERVER_INSECURE_HTTP=true
      - FLEET_URL=http://fleet-server:8220
      - KIBANA_FLEET_SETUP=true
      - KIBANA_HOST=http://kibana:5601
    ports:
      - "8220:8220"
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    networks:
      - elastic
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8220/api/status || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30

  # Elastic Agent - For testing integrations
  elastic-agent:
    image: docker.elastic.co/beats/elastic-agent:8.11.0
    container_name: elastic-agent
    environment:
      - FLEET_ENROLL=true
      - FLEET_URL=http://fleet-server:8220
      - FLEET_ENROLLMENT_TOKEN=${FLEET_ENROLLMENT_TOKEN:-changeme}
      - ELASTICSEARCH_HOST=http://elasticsearch:9200
      - KIBANA_HOST=http://kibana:5601
      - FLEET_INSECURE=true
    depends_on:
      fleet-server:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
    networks:
      - elastic
    user: root

  # Sample application to generate logs (NGINX)
  nginx-sample:
    image: nginx:latest
    container_name: nginx-sample
    ports:
      - "8080:80"
    volumes:
      - ./sample-data/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx-logs:/var/log/nginx
    networks:
      - elastic

networks:
  elastic:
    driver: bridge

volumes:
  elasticsearch-data:
  nginx-logs:
