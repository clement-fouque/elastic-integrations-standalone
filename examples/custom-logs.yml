# Custom Logs Integration Configuration Example
#
# This configuration collects custom application logs.
# To use this in Fleet:
#   1. Go to Kibana → Fleet → Integrations
#   2. Search for "Custom Logs"
#   3. Click "Add Custom Logs"
#   4. Use the settings below as reference

# Application Logs Configuration
custom_logs:
  enabled: true
  
  # Log file paths (use wildcards for rotating logs)
  paths:
    - /var/log/myapp/*.log
    - /var/log/myapp/application.log*
    
  # Exclude specific files
  exclude_files:
    - '.gz$'
    - '.zip$'
    
  # Multiline pattern for stack traces (adjust based on your log format)
  multiline:
    # Pattern to match the start of a new log entry
    pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}'
    negate: true
    match: after
    
  # Add custom fields
  fields:
    application: myapp
    environment: production
    
  # Processors for parsing and enrichment
  processors:
    # Parse JSON logs
    - decode_json_fields:
        fields: ['message']
        target: ''
        overwrite_keys: true
        when:
          contains:
            message: '{'
            
    # Parse timestamp
    - timestamp:
        field: timestamp
        formats:
          - '2006-01-02T15:04:05.999Z07:00'
          - '2006-01-02 15:04:05'
          
    # Add log level field
    - dissect:
        tokenizer: '%{timestamp} [%{log.level}] %{message}'
        field: 'message'
        target_prefix: ''
        when:
          not:
            has_fields: ['log.level']
            
    # Drop debug logs (optional)
    - drop_event:
        when:
          equals:
            log.level: DEBUG

# Example JSON Log Format
# {
#   "timestamp": "2024-01-15T10:30:45.123Z",
#   "level": "INFO",
#   "message": "User login successful",
#   "user_id": "12345",
#   "ip_address": "192.168.1.100"
# }

# Example Plain Text Log Format
# 2024-01-15 10:30:45 [INFO] User login successful - user_id: 12345

# Data Stream Configuration
data_streams:
  - type: logs
    dataset: myapp.logs
    namespace: default
